version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_django_media: {}
  production_django_logs: {}
  production_ssl_certs: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: name_goes_here_production_django
    volumes:
      - production_django_media:/app/name_goes_here/media
      - production_django_logs:/app/name_goes_here/logs
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.django
      - ./.envs/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: name_goes_here_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.postgres

  redis:
    image: redis:6

  celeryworker:
    <<: *django
    image: name_goes_here_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: name_goes_here_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: name_goes_here_production_flower
    command: /start-flower

  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: name_goes_here_local_nginx
    depends_on:
      - django
    volumes:
      - production_django_media:/usr/share/nginx/media:ro
      - production_ssl_certs:/etc/nginx/njs-acme
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://domain_name_goes_here/acme/auto"]
      interval: 90s
      timeout: 90s
      retries: 3
      start_period: 10s
